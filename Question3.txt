Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example; aaa=3a
Input: "aaabccdddda"
Output: "3ab2c4da"

Pseudo
//create an empty array
//create a counter starting with 0 to count instances of repeated char
//for loop for the counter
//nested loop to compare if index are the same
//push into array number and index of char
//else just index of char
//return joined string

___________________________________
const compressor = (str) => {
result = []
counter = 0
for (let i = 0; i < str.length; i += counter) {
  counter = 0
  for (let x = i; x < str.length; x++) {
    if (str[i] === str[x] ) {
      counter += 1
      } else { 
    break; 
    }
    }
    if (counter > 1) {
      result.push(`${counter}${str[i]}`)
    } else {
      result.push(`${str[i]}`)
    }
  }
  return result.join('');
}
console.log(compressor('aaabccdddda'))


